//! IncentivizedInboundChannel pallet benchmarking

use super::*;

use frame_benchmarking::{benchmarks, impl_benchmark_test_suite, whitelisted_caller};
use frame_system::{self, EventRecord, RawOrigin};
use hex_literal::hex;
use sp_std::{convert::TryInto, prelude::*};

use snowbridge_core::{ChannelId, Message, MessageId, Proof};
use snowbridge_ethereum::{Header, Log};

#[allow(unused_imports)]
use crate::inbound::Pallet as IncentivizedInboundChannel;

fn assert_last_event<T: Config>(system_event: <T as frame_system::Config>::Event) {
	let events = frame_system::Pallet::<T>::events();
	// compare to the last event record
	let EventRecord { event, .. } = &events[events.len() - 1];
	assert_eq!(event, &system_event);
}

// This collection of benchmarks should include a benchmark for each
// call dispatched by the channel, i.e. each "app" pallet function
// that can be invoked by MessageDispatch. The most expensive call
// should be used in the `submit` benchmark.
//
// We rely on configuration via chain spec of the app pallets because
// we don't have access to their storage here.
benchmarks! {

	#[extra]
	verify_without_dispatch {
		let relayer: T::AccountId = whitelisted_caller();
		let (header, message) = eth_mint_data();
		let envelope: envelope::Envelope<T> = rlp::decode::<Log>(&message.data)
			.map(|log| log.try_into().unwrap())
			.unwrap();
		<Nonce<T>>::put(2);
		<SourceChannel<T>>::put(envelope.channel);

		T::Verifier::initialize_storage(
			vec![header],
			0.into(),
			0, // forces all headers to be finalized
		)?;

	}: {

	}
	verify {
		assert_eq!(envelope.nonce, <Nonce<T>>::get());
	}

	// Benchmark `set_reward_fraction` under worst case conditions:
	// * The origin is authorized, i.e. equals UpdateOrigin
	set_reward_fraction {
		let authorized_origin = match T::UpdateOrigin::successful_origin().into() {
			Ok(raw) => raw,
			Err(_) => return Err("Failed to get raw origin from origin"),
		};

		// Pick a value that is different from the initial RewardFraction
		let fraction = Perbill::from_percent(50);
		assert!(<RewardFraction<T>>::get() != fraction);

	}: _(authorized_origin, fraction)
	verify {
		assert_eq!(<RewardFraction<T>>::get(), fraction);
	}
}

fn eth_mint_data() -> (Header, Message) {
	(
		Header {
			parent_hash: hex!("616872244fddc35315f7c6e0ad67171d74e200a70ee05f1e1e633f49ab0e2d08").into(),
			timestamp: 1619682198u64.into(),
			number: 74u64.into(),
			author: hex!("0000000000000000000000000000000000000000").into(),
			transactions_root: hex!("dd827279c5f79d0a55b1b014c37277e87e8e329698d71634ed5a9ecb0bad5d69").into(),
			ommers_hash: hex!("1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347").into(),
			extra_data: hex!("").into(),
			state_root: hex!("bd212b2a344f2a77b2c3097db26687b986939af84a832cb1cf9617a48c5cbed4").into(),
			receipts_root: hex!("c22e2e2d74ddd01bbb8298ccbf1c42acc21adafc5fd9f49dfbf8719e75eb9092").into(),
			logs_bloom: (&hex!("00000000000040000000000000000200000000000000400010000000010080000000000000000000000000001000000010000000000000000000000000000080000000000000000400000008000000000000000000008000000000000000000000000000020000000000000000000800000001000400000000000010000000000000020000000000000000000400000000000000000000000000040000000000000000000004000000000000000000000220000000000001000000000200080000000002000000000000000000000000000000000000000000000000000020402000000000000000000000000000000000000000000000000000000000000000")).into(),
			gas_used: 97210u64.into(),
			gas_limit: 6721975u64.into(),
			difficulty: 0u64.into(),
			seal: vec![
				hex!("a00000000000000000000000000000000000000000000000000000000000000000").to_vec(),
				hex!("880000000000000000").to_vec(),
			],
			base_fee: None,
		},
		Message {
			data: hex!("f9013a94eda338e4dc46038493b885327842fd3e301cab39e1a05e9ae1d7c484f74d554a503aa825e823725531d97e784dd9b1aacdb58d1f7076b90100000000000000000000000000774667629726ec1fabebcec0d9139bd1c8f72a2300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000057410189b4ab1ef20763630df9743acf155865600daff200d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d0000c16ff2862300000000000000000000000000000000000000000000000000000000000000000000").to_vec(),
			proof: Proof {
				block_hash: hex!("0ef7dda5ed1a551590a07bbd51c67c2f8b605e81bc5ae8e7b593603dd1706084").into(),
				tx_index: 0,
				data: (
					vec![hex!("c22e2e2d74ddd01bbb8298ccbf1c42acc21adafc5fd9f49dfbf8719e75eb9092").to_vec()],
					vec![hex!("f904a8822080b904a2f9049f0183017bbabf90394f89994774667629726ec1fabebcec0d9139bd1c8f72a23e1a0caae0f5e72020d428da73a237d1f9bf162e158dda6d4908769b8b60c095b01f4b86000000000000000000000000089b4ab1ef20763630df9743acf155865600daff2d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d000000000000000000000000000000000000000000000000002386f26fc10000f9011c94672a95c8928c8450b594186cf7954ec269626a2df863a0a78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a4098a0000000000000000000000000b1185ede04202fe62d38f5db72f71e38ff3e8305a000000000000000000000000089b4ab1ef20763630df9743acf155865600daff2b8a00000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f89b94672a95c8928c8450b594186cf7954ec269626a2df863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000089b4ab1ef20763630df9743acf155865600daff2a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000de0b6b3a7640000f9013a94eda338e4dc46038493b885327842fd3e301cab39e1a05e9ae1d7c484f74d554a503aa825e823725531d97e784dd9b1aacdb58d1f7076b90100000000000000000000000000774667629726ec1fabebcec0d9139bd1c8f72a2300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000057410189b4ab1ef20763630df9743acf155865600daff200d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d0000c16ff2862300000000000000000000000000000000000000000000000000000000000000000000").to_vec()],
				),
			},
		},
	)
}

impl_benchmark_test_suite!(
	IncentivizedInboundChannel,
	crate::inbound::test::new_tester(Default::default()),
	crate::inbound::test::Test,
);
