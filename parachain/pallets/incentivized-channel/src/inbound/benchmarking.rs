//! IncentivizedInboundChannel pallet benchmarking

#![cfg(feature = "runtime-benchmarks")]

use super::*;

use frame_benchmarking::{benchmarks, impl_benchmark_test_suite, whitelisted_caller};
use frame_system::{self, EventRecord, RawOrigin};
use hex_literal::hex;
use sp_std::{convert::TryInto, prelude::*};

use snowbridge_core::{ChannelId, Message, MessageId, Proof};
use snowbridge_ethereum::{Header, Log};

#[allow(unused_imports)]
use crate::inbound::Pallet as IncentivizedInboundChannel;

fn assert_last_event<T: Config>(system_event: <T as frame_system::Config>::Event) {
	let events = frame_system::Pallet::<T>::events();
	// compare to the last event record
	let EventRecord { event, .. } = &events[events.len() - 1];
	assert_eq!(event, &system_event);
}

// This collection of benchmarks should include a benchmark for each
// call dispatched by the channel, i.e. each "app" pallet function
// that can be invoked by MessageDispatch. The most expensive call
// should be used in the `submit` benchmark.
//
// We rely on configuration via chain spec of the app pallets because
// we don't have access to their storage here.
benchmarks! {
	// Benchmark `submit` extrinsic under worst case conditions:
	// * `submit` dispatches the DotApp::unlock call
	// * `unlock` call successfully unlocks DOT
	submit {
		let caller: T::AccountId = whitelisted_caller();
		let (header, message) = dot_unlock_data();
		let envelope: envelope::Envelope<T> = rlp::decode::<Log>(&message.data)
			.map(|log| log.try_into().unwrap())
			.unwrap();
		<Nonce<T>>::put(envelope.nonce - 1);
		<SourceChannel<T>>::put(envelope.channel);

		T::Verifier::initialize_storage(
			vec![header],
			0.into(),
			0, // forces all headers to be finalized
		)?;

	}: _(RawOrigin::Signed(caller.clone()), message)
	verify {
		assert_eq!(envelope.nonce, <Nonce<T>>::get());

		let message_id = MessageId::new(ChannelId::Incentivized, envelope.nonce);
		if let Some(event) = T::MessageDispatch::successful_dispatch_event(message_id) {
			assert_last_event::<T>(event);
		}
	}

	// Benchmark `set_reward_fraction` under worst case conditions:
	// * The origin is authorized, i.e. equals UpdateOrigin
	set_reward_fraction {
		let authorized_origin = match T::UpdateOrigin::successful_origin().into() {
			Ok(raw) => raw,
			Err(_) => return Err("Failed to get raw origin from origin"),
		};

		// Pick a value that is different from the initial RewardFraction
		let fraction = Perbill::from_percent(50);
		assert!(<RewardFraction<T>>::get() != fraction);

	}: _(authorized_origin, fraction)
	verify {
		assert_eq!(<RewardFraction<T>>::get(), fraction);
	}
}

// DOT unlock
// Channel = 0xeda338e4dc46038493b885327842fd3e301cab39
// Fee = 10000000000
// Nonce = 1
// Source = 0xb1185ede04202fe62d38f5db72f71e38ff3e8305
fn dot_unlock_data() -> (Header, Message) {
	(
		Header {
			parent_hash: hex!("1eb95c998f6af053b87e8955d7cecada585b0304dfb5d7283947a5674e6e42f1").into(),
			timestamp: 1619678921u64.into(),
			number: 72u64.into(),
			author: hex!("0000000000000000000000000000000000000000").into(),
			transactions_root: hex!("8f407c85c74ab696364e8ff77bbdcffeb52a118c1a50dd43d848c6e37407d9e5").into(),
			ommers_hash: hex!("1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347").into(),
			extra_data: hex!("").into(),
			state_root: hex!("2a785e43bdd23e81499a062c1645879e573484a329114c4dacb1762471793116").into(),
			receipts_root: hex!("a37efc2c11999db875b5080c244999f8625c165473aa7f9a374b0dfc31f9da85").into(),
			logs_bloom: (&hex!("00000000000040000000000000000200000000000000000010000000000080000000000000000000000000001000000010000000000000000000000000000000000000000000000400000008000000000000000000008000000000000000000000000000020000000000000000000800000001000400000000000010000000000000020000000000000000000400000000000000000000000000040000000000000000000004000000000000000000000200000000000001000000000200000000000002000000000000000000000000000000000000000000000000000020400000000000000000000000000000000000000000000000000000000000000000")).into(),
			gas_used: 107966u64.into(),
			gas_limit: 6721975u64.into(),
			difficulty: 0u64.into(),
			seal: vec![
				hex!("a00000000000000000000000000000000000000000000000000000000000000000").to_vec(),
				hex!("880000000000000000").to_vec(),
			],
			base_fee: None,
		},
		Message {
			data: hex!("f9013a94eda338e4dc46038493b885327842fd3e301cab39e1a05e9ae1d7c484f74d554a503aa825e823725531d97e784dd9b1aacdb58d1f7076b90100000000000000000000000000b1185ede04202fe62d38f5db72f71e38ff3e830500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000057400189b4ab1ef20763630df9743acf155865600daff200d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d000064a7b3b6e00d000000000000000000000000000000000000000000000000000000000000000000").to_vec(),
			proof: Proof {
				block_hash: hex!("ba80aac46bc6d7f7fdc3eba2a0643e0b2baad96ca69e2709e159d92143e343b6").into(),
				tx_index: 0,
				data: (
					vec![hex!("a37efc2c11999db875b5080c244999f8625c165473aa7f9a374b0dfc31f9da85").to_vec()],
					vec![hex!("f905e9822080b905e3f905e0018301a5bebf904d5f9013c94672a95c8928c8450b594186cf7954ec269626a2df863a0a78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a4098a0000000000000000000000000b1185ede04202fe62d38f5db72f71e38ff3e8305a000000000000000000000000089b4ab1ef20763630df9743acf155865600daff2b8c00000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000020d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d0000000000000000000000000000000000000000000000000000000000000000f89b94672a95c8928c8450b594186cf7954ec269626a2df863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000089b4ab1ef20763630df9743acf155865600daff2a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000de0b6b3a7640000f9011c94672a95c8928c8450b594186cf7954ec269626a2df863a0a78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a4098a0000000000000000000000000b1185ede04202fe62d38f5db72f71e38ff3e8305a000000000000000000000000089b4ab1ef20763630df9743acf155865600daff2b8a00000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f89b94672a95c8928c8450b594186cf7954ec269626a2df863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000089b4ab1ef20763630df9743acf155865600daff2a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000de0b6b3a7640000f9013a94eda338e4dc46038493b885327842fd3e301cab39e1a05e9ae1d7c484f74d554a503aa825e823725531d97e784dd9b1aacdb58d1f7076b90100000000000000000000000000b1185ede04202fe62d38f5db72f71e38ff3e830500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000057400189b4ab1ef20763630df9743acf155865600daff200d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d000064a7b3b6e00d000000000000000000000000000000000000000000000000000000000000000000").to_vec()],
				),
			},
		},
	)
}

impl_benchmark_test_suite!(
	IncentivizedInboundChannel,
	crate::inbound::test::new_tester(Default::default()),
	crate::inbound::test::Test,
);
